name: Auto-Update Headers

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  update-headers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for proper diff detection

      - name: Debug Git State
        run: |
          echo "### Git Status Before Modifications ###"
          git status
          echo "### Git Diff HEAD~1 ###"
          git diff HEAD~1 --stat
          echo "### Git Log Last 2 Commits ###"
          git log -2 --oneline

      - name: Find modified TXT files
        id: modified_files
        run: |
          MODIFIED_FILES=$(git diff --name-only HEAD~1 -- '*.txt')
          echo "### Detected Modified Files ###"
          echo "$MODIFIED_FILES"

          if [ -z "$MODIFIED_FILES" ]; then
            echo "No .txt files changed, exiting."
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV
          fi

      - name: Force Update Headers
        if: env.HAS_CHANGES == 'true'
        run: |
          update_headers() {
            local file="$1"
            [ -f "$file" ] || return

            local timestamp=$(date -u +"%d %b %Y %H:%M UTC")
            local version=$(date -u +"%Y.%m%d.%H%M.%S")
            local num_entries=$(grep -vE "^\s*$|^\s*[#!]" "$file" | tail -n +11 | wc -l | tr -d ' ')

            echo "Updating headers for: $file"
            echo "Timestamp: $timestamp, Version: $version, Entries: $num_entries"

            sed -E -i "
              s|^(Last modified: ).*|\1$timestamp|;
              s|^(Version: ).*|\1$version|;
              s|^(Number of entries: ).*|\1$num_entries|;
            " "$file"

            # Ensure Git detects a change
            echo " " >> "$file"  # Add a space
            sed -i '$ s/ $//' "$file"  # Remove the space to keep the file unchanged visually
          }

          for file in $MODIFIED_FILES; do
            update_headers "$file"
          done

      - name: Commit updated headers
        if: env.HAS_CHANGES == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $MODIFIED_FILES

          # If no real changes, force one by modifying whitespace
          if git diff --cached --quiet; then
            echo "Forcing commit due to Git ignoring changes."
            for file in $MODIFIED_FILES; do
              echo " " >> "$file"  # Add a space
              sed -i '$ s/ $//' "$file"  # Remove it back
            done
            git add $MODIFIED_FILES
          fi

          git commit -m "Auto-update headers"
          git push
